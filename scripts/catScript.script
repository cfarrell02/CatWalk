local gesture = require "in.gesture"
local roadY = 112

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "acquire_camera_focus")
	gesture.SETTINGS.double_tap_interval = 1
	gesture.SETTINGS.multi_touch = false
	self.blockSize = 16 -- Change to match block dimensions of level
	self.speed = 100 -- Adjust speed as needed
	self.movementCooldown = .01
	self.currentCooldown = 0
	self.randomLookDuration = 2 -- Time spent in "look" state (in seconds)
	self.randomLookCounter = 0
	self.position = go.get_position()
	self.nextPosition = go.get_position()
	self.isMoving = false
	self.currentAnim = hash("")
	self.direction = "Forward"
	self.currentState = "idle"
	self.currentY=go.get_position().y

	sound.play("#music", {delay = 0, gain =0.1,pan = 0, speed = 1})
	
end

function update(self, dt)
	if self.isMoving then
		self.currentState = "run"
		local direction = self.nextPosition - self.position
		local distance = vmath.length(direction)
		local movement = self.speed * dt

		if movement >= distance then
			self.position = vmath.vector3(self.nextPosition.x, self.nextPosition.y, self.nextPosition.z)
			self.isMoving = false
		else
			local movementVec = vmath.normalize(direction) * movement
			self.position = self.position + movementVec
		end

		go.set_position(self.position)
	else
		if self.currentState == "idle" then
			local randomIndex = math.random(0,10)
			if randomIndex == 1 and self.randomLookCounter > self.randomLookDuration*6  then
				self.randomLookCounter = 0 -- Reset counter
				self.currentState = "looking"
			end
			
		elseif self.randomLookCounter > self.randomLookDuration or self.currentState ~= "looking" then
				self.currentState = "idle"
		end
	end

	if go.get_position().y - roadY > self.currentY then
		--Code for when a new road has been passed
		msg.post("main:/controller#controller", "score_increment")
		self.currentY = go.get_position().y
	end



	set_animation(self, self.currentState)
	self.currentCooldown = self.currentCooldown - dt
	self.randomLookCounter = self.randomLookCounter + dt
end

function on_input(self, action_id, action)
	local g = gesture.on_input(self, action_id, action)
		if g then
		if self.currentCooldown <= 0 and not self.isMoving then
			local newNextPosition = vmath.vector3(self.position.x, self.position.y, self.position.z)
			local offset = vmath.vector3()
			local gain = .05
			if g.swipe_right then
				sound.play("#sound", {delay = 0, gain = gain, pan = 0, speed = 1})
				offset.x = self.blockSize
				self.direction = "Right"
			elseif g.swipe_left then
				sound.play("#sound", {delay = 0, gain = gain, pan = 0, speed = 1})
				offset.x = -self.blockSize
				self.direction = "Left"
			elseif g.swipe_down then
				sound.play("#sound", {delay = 0, gain = gain, pan = 0, speed = 1})
				offset.y = -self.blockSize
				self.direction = "Backward"
			elseif g.swipe_up or g.tap or g.long_press or g.double_tap then
				--Any other kind of touch, move forward
				sound.play("#sound", {delay = 0, gain = gain, pan = 0, speed = 1})
				offset.y = self.blockSize
				self.direction = "Forward"
			end
			
			-- Calculate the new position
			newNextPosition = newNextPosition + offset

			-- Check collision with the next tile
			local nextTileCollision = physics.raycast(self.position, newNextPosition, { group = hash("barrier") })
			if nextTileCollision and nextTileCollision.group == hash("barrier") then
				-- Collider of next tile is a barrier, do not move
				return
			end

			-- Calculate the center of the grid cell for the newNextPosition
			newNextPosition.x = math.floor(newNextPosition.x / self.blockSize) * self.blockSize + self.blockSize / 2
			newNextPosition.y = math.floor(newNextPosition.y / self.blockSize) * self.blockSize + self.blockSize / 2

			-- Offset the y-position by half of the character's height to center vertically
			local characterHeight = 32 -- Adjust with the actual height of the character
			newNextPosition.y = newNextPosition.y + (self.blockSize - characterHeight) / 2

			-- Check if the new position is different from the current position
			if newNextPosition.x ~= self.position.x or newNextPosition.y ~= self.position.y then
				self.nextPosition = newNextPosition
				self.isMoving = true
				self.currentCooldown = self.movementCooldown
			end
		end

	end
end


-- Takes in first part of string name for animation, e.g., 'idle'
function set_animation(self, animationString)
	local animHash = hash(animationString .. self.direction)
	if animHash ~= self.currentAnim then
		sprite.play_flipbook("#sprite", animHash)
		self.currentAnim = animHash
	end
end

function on_message(self, message_id, message, sender)

	if message_id == hash("death")then
		-- sound.play("#scream", {delay = 0, gain =1,pan = 0, speed = 1})
		msg.post("main:/controller#controller", "show_death")
	end

	if message_id == hash("contact_point_response") then
		if message.group == hash("barrier") then
			go.set_position(go.get_position() + message.normal * message.distance)
		elseif message.group == hash("pizza") then
			go.delete(message.other_id)
			sound.play("#eat", {delay = 0, gain =0.1,pan = 0, speed = 1})
			msg.post("main:/controller#controller", "score_increment", {amount = 10})
		end
	end

	if message_id == hash("collision_response") then
		if message.group == hash("car") then
			--Code for death here
			print("Hit by car!!")
			-- sound.play("#scream", {delay = 0, gain =0.1,pan = 0, speed = 1})
			msg.post("main:/controller#controller", "show_death")

		end
	end

	if message_id == hash("on_gesture") then
		pprint(message)
		if message.swipe_right then
			offset.x = self.blockSize
			self.direction = "Right"
		elseif message.tap then
			offset.y = self.blockSize
			self.direction = "Forward"
		elseif message.swipe_left then
			offset.x = -self.blockSize
			self.direction = "Left"
		elseif message.swipe_up then
			offset.y = self.blockSize
			self.direction = "Forward"
		elseif message.swipe_down then
			offset.y = -self.blockSize
			self.direction = "Backward"
		end
	end
end
